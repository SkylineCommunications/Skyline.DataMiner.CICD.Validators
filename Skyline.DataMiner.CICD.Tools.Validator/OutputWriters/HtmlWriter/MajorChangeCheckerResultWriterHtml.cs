namespace Skyline.DataMiner.CICD.Tools.Validator.OutputWriters.HtmlWriter
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text;

    using Microsoft.Extensions.Logging;

    using Skyline.DataMiner.CICD.Tools.Validator.OutputWriters.HtmlWriter;
    using Skyline.DataMiner.CICD.Validators.Common.Model;

    internal class MajorChangeCheckerResultWriterHtml : IMajorChangeCheckerResultWriter
    {
        private readonly string resultsFilePath;
        private readonly ILogger logger;
        private readonly bool includeSuppressed;

        public MajorChangeCheckerResultWriterHtml(string resultsFilePath, ILogger logger, bool includeSuppressed)
        {
            this.resultsFilePath = resultsFilePath;
            this.logger = logger;
            this.includeSuppressed = includeSuppressed;
        }

        public void WriteResults(MajorChangeCheckerResults mccResults)
        {
            logger.LogInformation("Writing MCC results to HTML...");

            var templateStart = Resources.validatorResultsTemplateStart;
            templateStart = templateStart.Replace("$protocolName$", mccResults.NewProtocol);
            templateStart = templateStart.Replace("$protocolVersion$", mccResults.NewVersion);

            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.Append(templateStart);
            stringBuilder.AppendFormat("<h1>Comparison: {0} v{1} → {2} v{3}</h1>",
                mccResults.OldProtocol, mccResults.OldVersion,
                mccResults.NewProtocol, mccResults.NewVersion);
            stringBuilder.Append("    <table id=\"resultstable\">\r\n        <tr>\r\n            <th>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Description</th>\r\n            <th>State</th>\r\n            <th>Severity</th>\r\n            <th>Code</th>\r\n            <th>Line</th>\r\n            <th>Column</th>\r\n        </tr>");

            var criticalIssues = new List<MajorChangeCheckerResult>();
            var majorIssues = new List<MajorChangeCheckerResult>();
            var minorIssues = new List<MajorChangeCheckerResult>();
            var warningIssues = new List<MajorChangeCheckerResult>();

            foreach (var result in mccResults.Issues)
            {
                switch (result.Severity)
                {
                    case Severity.Critical:
                        criticalIssues.Add(result);
                        break;
                    case Severity.Major:
                        majorIssues.Add(result);
                        break;
                    case Severity.Minor:
                        minorIssues.Add(result);
                        break;
                    case Severity.Warning:
                        warningIssues.Add(result);
                        break;
                }
            }

            AddComparisonLine(mccResults, stringBuilder);
            AddCategoryLine("Critical", criticalIssues.Count, mccResults.CriticalIssueCount, mccResults.SuppressedCriticalIssueCount, stringBuilder);
            var convertedCriticalResults = ConvertResults(criticalIssues);
            WriteItems(convertedCriticalResults, stringBuilder, includeSuppressed);

            AddCategoryLine("Major", majorIssues.Count, mccResults.MajorIssueCount, mccResults.SuppressedMajorIssueCount, stringBuilder);
            var convertedMajorResults = ConvertResults(majorIssues);
            WriteItems(convertedMajorResults, stringBuilder, includeSuppressed);

            AddCategoryLine("Minor", minorIssues.Count, mccResults.MinorIssueCount, mccResults.SuppressedMinorIssueCount, stringBuilder);
            var convertedMinorResults = ConvertResults(minorIssues);
            WriteItems(convertedMinorResults, stringBuilder, includeSuppressed);

            AddCategoryLine("Warning", warningIssues.Count, mccResults.WarningIssueCount, mccResults.SuppressedWarningIssueCount, stringBuilder);
            var convertedWarningResults = ConvertResults(warningIssues);
            WriteItems(convertedWarningResults, stringBuilder, includeSuppressed);

            var templateEnd = Resources.validatorResultsTemplateEnd;
            stringBuilder.Append(templateEnd);

            stringBuilder.AppendFormat("{0}<footer>Generated by <a href=\"https://github.com/SkylineCommunications/Skyline.DataMiner.CICD.Validators\" target=\"_blank\">Skyline.DataMiner.CICD.Tools.Validator</a> v{1} at {2}.</footer>{0}</body>{0}</html>", Environment.NewLine, mccResults.MCCVersion, mccResults.ValidationTimeStamp);

            File.WriteAllText(resultsFilePath, stringBuilder.ToString());
        }

        private void WriteItems(List<MajorChangeCheckerResultTreeItem> convertedResults, StringBuilder stringBuilder, bool includeSuppressed)
        {
            foreach (var item in convertedResults)
            {
                item.WriteHtml(stringBuilder, includeSuppressed);
            }
        }

        private static List<MajorChangeCheckerResultTreeItem> ConvertResults(IList<MajorChangeCheckerResult> results)
        {
            List<MajorChangeCheckerResultTreeItem> treeItems = new List<MajorChangeCheckerResultTreeItem>();

            foreach (var result in results)
            {
                if (result?.SubResults?.Count > 0)
                {
                    var treeNode = CreateTreeNode(result);
                    AddSubResults(treeNode, result);
                    treeNode.UpdateCounts();
                    treeItems.Add(treeNode);
                }
                else
                {
                    var treeLeaf = CreateTreeLeaf(result);
                    treeItems.Add(treeLeaf);
                }
            }

            return treeItems;
        }

        private static MajorChangeCheckerResultTreeLeaf CreateTreeLeaf(MajorChangeCheckerResult result)
        {
            return new MajorChangeCheckerResultTreeLeaf(result);
        }

        private static MajorChangeCheckerResultTreeNode CreateTreeNode(MajorChangeCheckerResult result)
        {
            return new MajorChangeCheckerResultTreeNode(result);
        }

        private static void AddSubResults(MajorChangeCheckerResultTreeNode treeNode, MajorChangeCheckerResult result)
        {
            foreach (var subresult in result.SubResults)
            {
                if (subresult.SubResults?.Count > 0)
                {
                    var node = CreateTreeNode(subresult);
                    treeNode.SubResults.Add(node);
                    AddSubResults(node, subresult);
                    node.UpdateCounts();
                }
                else
                {
                    var leaf = CreateTreeLeaf(subresult);
                    treeNode.SubResults.Add(leaf);
                }
            }
        }

        private void AddComparisonLine(MajorChangeCheckerResults mccResults, StringBuilder stringBuilder)
        {
            int totalActive = mccResults.CriticalIssueCount + mccResults.MajorIssueCount + mccResults.MinorIssueCount + mccResults.WarningIssueCount;
            int totalSuppressed = mccResults.SuppressedCriticalIssueCount + mccResults.SuppressedMajorIssueCount + mccResults.SuppressedMinorIssueCount + mccResults.SuppressedWarningIssueCount;

            stringBuilder.AppendFormat("        <tr data-depth=\"0\" class=\"collapse level0\">{0}            <td>", Environment.NewLine);
            stringBuilder.AppendFormat("<span class=\"toggle collapse\"></span>&nbsp;<span>&nbsp;</span>&nbsp;Comparison: {0} v{1} → {2} v{3} ",
                mccResults.OldProtocol, mccResults.OldVersion,
                mccResults.NewProtocol, mccResults.NewVersion);

            if (includeSuppressed)
            {
                stringBuilder.AppendFormat("({0} active, {1} suppressed)", totalActive, totalSuppressed);
            }
            else
            {
                stringBuilder.AppendFormat("({0} active)", totalActive);
            }

            stringBuilder.AppendFormat("</td>{0}            <td></td>{0}            <td></td>{0}            <td></td>{0}            <td></td>{0}            <td></td>{0}        </tr>", Environment.NewLine);
        }

        private void AddCategoryLine(string category, int childIssueCount, int activeCount, int suppressedCount, StringBuilder stringBuilder)
        {
            stringBuilder.AppendFormat("        <tr data-depth=\"1\" class=\"collapse level1\">{0}            <td>", Environment.NewLine);

            if (childIssueCount > 0)
            {
                stringBuilder.Append("<span class=\"toggle collapse\"></span>");
            }
            else
            {
                stringBuilder.Append("<span class=\"notoggle\"></span>");
            }

            stringBuilder.AppendFormat("&nbsp;<span class=\"{0}\" >&nbsp;</span>&nbsp;{1} ", category.ToLower(), category);

            if (includeSuppressed)
            {
                stringBuilder.AppendFormat("({0} active, {1} suppressed)", activeCount, suppressedCount);
            }
            else
            {
                stringBuilder.AppendFormat("({0} active)", activeCount);
            }

            stringBuilder.AppendFormat("</td>{0}            <td></td>{0}            <td></td>{0}            <td></td>{0}            <td></td>{0}            <td></td>{0}        </tr>", Environment.NewLine);
        }
    }

    internal abstract class MajorChangeCheckerResultTreeItem
    {
        public abstract void WriteHtml(StringBuilder stringBuilder, bool includeSuppressed);
        public abstract void UpdateCounts();
        public abstract int Count { get; }
        public abstract int ActiveCount { get; }
        public abstract int SuppressedCount { get; }
    }

    internal class MajorChangeCheckerResultTreeLeaf : MajorChangeCheckerResultTreeItem
    {
        private readonly MajorChangeCheckerResult result;

        public MajorChangeCheckerResultTreeLeaf(MajorChangeCheckerResult result)
        {
            this.result = result;
        }

        public override void WriteHtml(StringBuilder stringBuilder, bool includeSuppressed)
        {
            if (!includeSuppressed && result.Suppressed)
            {
                return;
            }

            string status = result.Suppressed ? "Suppressed" : "Active";
            string severityClass = result.Severity.ToString().ToLower();

            stringBuilder.AppendFormat("        <tr data-depth=\"2\" class=\"collapse level2 {0}\">{1}            <td>", severityClass, Environment.NewLine);
            stringBuilder.Append("<span class=\"notoggle\"></span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;");
            stringBuilder.Append(System.Web.HttpUtility.HtmlEncode(result.Description));
            stringBuilder.AppendFormat("</td>{0}            <td>{1}</td>{0}            <td>{2}</td>{0}            <td>{3}</td>{0}            <td>{4}</td>{0}            <td>{5}</td>{0}        </tr>",
                Environment.NewLine,
                status,
                result.Severity,
                result.Id,
                result.Line,
                result.Column);
        }

        public override void UpdateCounts() { }
        public override int Count => 1;
        public override int ActiveCount => result.Suppressed ? 0 : 1;
        public override int SuppressedCount => result.Suppressed ? 1 : 0;
    }

    internal class MajorChangeCheckerResultTreeNode : MajorChangeCheckerResultTreeItem
    {
        private readonly MajorChangeCheckerResult result;
        public List<MajorChangeCheckerResultTreeItem> SubResults { get; } = new List<MajorChangeCheckerResultTreeItem>();

        private int count;
        private int activeCount;
        private int suppressedCount;

        public MajorChangeCheckerResultTreeNode(MajorChangeCheckerResult result)
        {
            this.result = result;
        }

        public override void WriteHtml(StringBuilder stringBuilder, bool includeSuppressed)
        {
            if (!includeSuppressed && result.Suppressed)
            {
                return;
            }

            string status = result.Suppressed ? "Suppressed" : "Active";
            string severityClass = result.Severity.ToString().ToLower();

            stringBuilder.AppendFormat("        <tr data-depth=\"2\" class=\"collapse level2 {0}\">{1}            <td>", severityClass, Environment.NewLine);
            stringBuilder.Append("<span class=\"toggle collapse\"></span>");
            stringBuilder.Append(System.Web.HttpUtility.HtmlEncode(result.Description));
            stringBuilder.AppendFormat("</td>{0}            <td>{1}</td>{0}            <td>{2}</td>{0}            <td>{3}</td>{0}            <td>{4}</td>{0}            <td>{5}</td>{0}        </tr>",
                Environment.NewLine,
                status,
                result.Severity,
                result.Id,
                result.Line,
                result.Column);

            foreach (var subResult in SubResults)
            {
                subResult.WriteHtml(stringBuilder, includeSuppressed);
            }
        }

        public override void UpdateCounts()
        {
            count = 1;
            activeCount = result.Suppressed ? 0 : 1;
            suppressedCount = result.Suppressed ? 1 : 0;

            foreach (var subResult in SubResults)
            {
                if (subResult is MajorChangeCheckerResultTreeNode node)
                {
                    node.UpdateCounts();
                }
                count += subResult.Count;
                activeCount += subResult.ActiveCount;
                suppressedCount += subResult.SuppressedCount;
            }
        }

        public override int Count => count;
        public override int ActiveCount => activeCount;
        public override int SuppressedCount => suppressedCount;
    }
}