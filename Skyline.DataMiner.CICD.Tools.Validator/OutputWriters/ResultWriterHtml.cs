namespace Skyline.DataMiner.CICD.Tools.Validator.OutputWriters
{
    using System.Collections.Generic;
    using System.Text;

    using Microsoft.Extensions.Logging;

    using Skyline.DataMiner.CICD.FileSystem;
    using Skyline.DataMiner.CICD.Tools.Validator.OutputWriters.HtmlWriter;
    using Skyline.DataMiner.CICD.Tools.Validator.OutputWriters.Results;
    using Skyline.DataMiner.CICD.Validators.Common.Model;
    
    internal class ResultWriterHtml(string resultsFilePath, ILogger logger, bool includeSuppressed) : IResultWriter
    {
        public void WriteResults(MajorChangeCheckerResults results)
        {
            string title = $"{results.PreviousProtocol} v{results.PreviousVersion} => {results.Protocol} {results.Version}";
            WriteResultsInternal(results, title);
        }

        public void WriteResults(ValidatorResults results)
        {
            string title = $"{results.Protocol} v{results.Version}";
            WriteResultsInternal(results, title);
        }

        private void WriteResultsInternal(ValidatorResults results, string title)
        {
            logger.LogInformation("  Writing results to {ResultsFilePath}...", resultsFilePath);

            StringBuilder htmlBuilder = new StringBuilder();
            htmlBuilder.Append("<!DOCTYPE html>");
            htmlBuilder.Append("<html lang=\"en\">");

            var head = Resources.resultsTemplateHead.Replace("$protocolName$", results.Protocol).Replace("$protocolVersion$", results.Version);
            htmlBuilder.Append(head);

            // Add start body
            htmlBuilder.Append("<body>");

            // Add title
            htmlBuilder.Append($"<h1>{title}</h1>");

            AddResultsTable(results, htmlBuilder, title);

            // Add footer
            htmlBuilder.Append($"<footer>Generated by <a href=\"https://github.com/SkylineCommunications/Skyline.DataMiner.CICD.Validators\" target=\"_blank\">Skyline.DataMiner.CICD.Tools.Validator</a> v{results.ValidatorVersion} at {results.ValidationTimeStamp}.</footer>");

            htmlBuilder.Append("</body>");

            var script = Resources.resultsTemplateScript;
            htmlBuilder.Append(script);

            htmlBuilder.Append("</html>");

            FileSystem.Instance.File.WriteAllText(resultsFilePath, htmlBuilder.ToString());
        }
        
        private void AddResultsTable(ValidatorResults results, StringBuilder stringBuilder, string rootRowText)
        {
            // Add table start
            stringBuilder.Append("<table id=\"resultstable\">");

            // Add header row
            stringBuilder.Append("<tr><th>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Description</th><th>State</th><th>Certainty</th><th>Fix Impact</th><th>Category</th><th>Code</th><th>Line</th><th>Column</th><th>DVE</th></tr>");

            var criticalIssues = new List<ValidatorResult>();
            var majorIssues = new List<ValidatorResult>();
            var minorIssues = new List<ValidatorResult>();
            var warningIssues = new List<ValidatorResult>();

            foreach (var result in results.Issues)
            {
                switch (result.Severity)
                {
                    case Severity.Critical:
                        criticalIssues.Add(result);
                        break;
                    case Severity.Major:
                        majorIssues.Add(result);
                        break;
                    case Severity.Minor:
                        minorIssues.Add(result);
                        break;
                    case Severity.Warning:
                        warningIssues.Add(result);
                        break;
                }
            }

            AddProtocolLine(results, stringBuilder, rootRowText);
            AddCategoryLine("Critical", criticalIssues.Count, results.CriticalIssueCount, results.SuppressedCriticalIssueCount, stringBuilder);
            var convertedCriticalResults = ConvertResults(criticalIssues);
            WriteItems(convertedCriticalResults, stringBuilder);

            AddCategoryLine("Major", majorIssues.Count, results.MajorIssueCount, results.SuppressedMajorIssueCount, stringBuilder);
            var convertedMajorResults = ConvertResults(majorIssues);
            WriteItems(convertedMajorResults, stringBuilder);

            AddCategoryLine("Minor", minorIssues.Count, results.MinorIssueCount, results.SuppressedMinorIssueCount, stringBuilder);
            var convertedMinorResults = ConvertResults(minorIssues);
            WriteItems(convertedMinorResults, stringBuilder);

            AddCategoryLine("Warning", warningIssues.Count, results.WarningIssueCount, results.SuppressedWarningIssueCount, stringBuilder);
            var convertedWarningResults = ConvertResults(warningIssues);
            WriteItems(convertedWarningResults, stringBuilder);

            // Add table end
            stringBuilder.Append("</table>");
        }

        private void WriteItems(List<ValidatorResultTreeItem> convertedResults, StringBuilder stringBuilder)
        {
            foreach (var item in convertedResults)
            {
                item.WriteHtml(stringBuilder, includeSuppressed);
            }
        }

        private static List<ValidatorResultTreeItem> ConvertResults(IList<ValidatorResult> results)
        {
            List<ValidatorResultTreeItem> treeItems = [];

            foreach (var result in results)
            {
                if (result.SubResults?.Count > 0)
                {
                    var validatorResult = CreateTreeNode(result);
                    AddSubResults(validatorResult, result);
                    validatorResult.UpdateCounts();
                    treeItems.Add(validatorResult);
                }
                else
                {
                    var validatorResult = CreateTreeLeaf(result);
                    treeItems.Add(validatorResult);
                }
            }

            return treeItems;
        }

        private static ValidatorResultTreeLeaf CreateTreeLeaf(ValidatorResult result)
        {
            return new ValidatorResultTreeLeaf(result);
        }

        private static ValidatorResultTreeNode CreateTreeNode(ValidatorResult result)
        {
            return new ValidatorResultTreeNode(result);
        }

        private static void AddSubResults(ValidatorResultTreeNode treeNode, ValidatorResult result)
        {
            foreach (var subResult in result.SubResults ?? [])
            {
                if (subResult.SubResults?.Count > 0)
                {
                    var node = CreateTreeNode(subResult);
                    treeNode.SubResults.Add(node);
                    AddSubResults(node, subResult);
                    node.UpdateCounts();
                }
                else
                {
                    var leaf = CreateTreeLeaf(subResult);
                    treeNode.SubResults.Add(leaf);
                }
            }
        }

        private void AddProtocolLine(ValidatorResults results, StringBuilder stringBuilder, string rootRowText)
        {
            int totalActive = results.CriticalIssueCount + results.MajorIssueCount + results.MinorIssueCount + results.WarningIssueCount;
            int totalSuppressed = results.SuppressedCriticalIssueCount + results.SuppressedMajorIssueCount + results.SuppressedMinorIssueCount + results.SuppressedWarningIssueCount;

            // Add row start
            stringBuilder.Append("<tr data-depth=\"0\" class=\"collapse level0\">");

            // Add protocol name and version with expand/collapse toggle
            stringBuilder.Append($"<td><span class=\"toggle collapse\"></span>&nbsp;<span>&nbsp;</span>&nbsp;<b>{rootRowText}</b> ");

            if (includeSuppressed)
            {
                stringBuilder.Append($"({totalActive} active, {totalSuppressed} suppressed)");
            }
            else
            {
                stringBuilder.Append($"({totalActive} active)");
            }

            stringBuilder.Append("</td>");

            // Add empty columns
            stringBuilder.Append("</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td>");

            // Add row end
            stringBuilder.Append("</tr>");
        }

        private void AddCategoryLine(string category, int childIssueCount, int activeCount, int suppressedCount, StringBuilder stringBuilder)
        {
            // Add row start
            stringBuilder.Append("<tr data-depth=\"1\" class=\"collapse level1\">");

            // Add Category with expand/collapse toggle and colored rectangle
            stringBuilder.Append("<td>");
            string toggleClass = childIssueCount > 0 ? "toggle collapse" : "notoggle";
            stringBuilder.Append($"<span class=\"{toggleClass}\"></span>");
            stringBuilder.Append($"&nbsp;<span class=\"{category.ToLower()}\" >&nbsp;</span>&nbsp;<b>{category}</b> ");

            if (includeSuppressed)
            {
                stringBuilder.Append($"({activeCount} active, {suppressedCount} suppressed)");
            }
            else
            {
                stringBuilder.Append($"({activeCount} active)");
            }

            stringBuilder.Append("</td>");

            // Add empty columns
            stringBuilder.Append("<td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td>");

            // Add row end
            stringBuilder.Append("</tr>");
        }
    }
}
