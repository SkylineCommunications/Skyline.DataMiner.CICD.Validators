namespace Skyline.DataMiner.CICD.Tools.Validator.OutputWriters
{
    using System;
    using System.Collections.Generic;
	using System.IO;
	using System.Text;

	using Skyline.DataMiner.CICD.Validators.Common.Model;

	internal class ResultWriterHtml : IResultWriter
	{
		private readonly string resultsFilePath;

		public ResultWriterHtml(string resultsFilePath)
		{
			this.resultsFilePath = resultsFilePath;
		}

		public void WriteResults(ValidatorResults validatorResults)
		{
            Console.WriteLine("  Writing results to " + resultsFilePath + "...");
			var templateStart = Resources.validatorResultsTemplateStart;

			StringBuilder stringBuilder = new StringBuilder();
			stringBuilder.Append(templateStart);
			stringBuilder.AppendFormat("<h1>{0} v{1}</h1>", validatorResults.Protocol, validatorResults.Version);
			stringBuilder.Append("    <table id=\"resultstable\">\r\n        <tr>\r\n            <th>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Description</th>\r\n            <th>State</th>\r\n            <th>Certainty</th>\r\n            <th>Fix Impact</th>\r\n            <th>Category</th>\r\n            <th>Code</th>\r\n            <th>Line</th>\r\n            <th>Column</th>\r\n            <th>DVE</th>\r\n        </tr>");
			var criticalIssues = new List<ValidatorResult>();
			var majorIssues = new List<ValidatorResult>();
			var minorIssues = new List<ValidatorResult>();
			var warningIssues = new List<ValidatorResult>();
			var informationIssues = new List<ValidatorResult>();

			foreach (var result in validatorResults.Issues)
			{
				switch (result.Severity)
				{
					case Severity.Critical:
						criticalIssues.Add(result);
						break;
					case Severity.Major:
						majorIssues.Add(result);
						break;
					case Severity.Minor:
						minorIssues.Add(result);
						break;
					case Severity.Warning:
						warningIssues.Add(result);
						break;
					case Severity.Information:
						informationIssues.Add(result);
						break;
				}
			}

			AddCategoryLine("Critical", criticalIssues.Count, validatorResults.CriticalIssueCount, stringBuilder);
			AddResults(criticalIssues, stringBuilder);
			AddCategoryLine("Major", majorIssues.Count, validatorResults.MajorIssueCount, stringBuilder);
			AddResults(majorIssues, stringBuilder);
			AddCategoryLine("Minor", minorIssues.Count, validatorResults.MinorIssueCount, stringBuilder);
			AddResults(minorIssues, stringBuilder);
			AddCategoryLine("Warning", warningIssues.Count, validatorResults.WarningIssueCount, stringBuilder);
			AddResults(warningIssues, stringBuilder);

			var templateEnd = Resources.validatorResultsTemplateEnd;
			stringBuilder.Append(templateEnd);

			stringBuilder.AppendFormat("\r\n<footer>Generated by Skyline.DataMiner.CICD.Tools.Validator v{0} at {1}.</footer>\r\n</body>\r\n</html>", validatorResults.ValidatorVersion, validatorResults.ValidationTimestamp);

			File.WriteAllText(resultsFilePath, stringBuilder.ToString());
		}

		private static void AddCategoryLine(string category, int childIssueCount, int activeCount, StringBuilder stringBuilder)
		{
			if (childIssueCount > 0)
			{
				stringBuilder.AppendFormat("        <tr data-depth=\"0\" class=\"collapse level0\">\r\n            <td><span class=\"toggle collapse\"></span>&nbsp;<span class=\"{0}\" >&nbsp;</span>&nbsp;{1} ({2} active)</td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n        </tr>", category.ToLower(), category, activeCount);
			}
			else
			{
				stringBuilder.AppendFormat("        <tr data-depth=\"0\" class=\"collapse level0\">\r\n            <td><span class=\"notoggle\"></span>&nbsp;<span class=\"{0}\" >&nbsp;</span>&nbsp;{1} ({2} active)</td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n            <td></td>\r\n        </tr>", category.ToLower(), category, activeCount);
			}
		}

		private static void AddResults(List<ValidatorResult> results, StringBuilder stringBuilder, int depth = 1)
		{
			foreach (var result in results)
			{
				//if(result.Suppressed != null && result.Suppressed.Value == true)
				if (result.Suppressed == true)
				{
					stringBuilder.AppendFormat("        <tr data-depth=\"{0}\" class=\"collapse level{0} suppressed\">\r\n", depth);
				}
				else
				{
					stringBuilder.AppendFormat("        <tr data-depth=\"{0}\" class=\"collapse level{0}\">\r\n", depth);
				}

				if (result.SubResults != null && result.SubResults.Count > 0)
				{
					stringBuilder.AppendFormat("            <td><span class=\"toggle collapse\"></span>&nbsp;<span class=\"{0}\" >&nbsp;</span>&nbsp;{1}</td>\r\n            <td>{2}</td>\r\n            <td>{3}</td>\r\n            <td>{4}</td>\r\n            <td>{5}</td>\r\n            <td>{6}</td>\r\n            <td>{7}</td>\r\n            <td>{8}</td>\r\n            <td>{9}</td>\r\n        </tr>", result.Severity.ToString().ToLower(), result.Description, GetState(result), result.Certainty, result.FixImpact, result.Category, result.Id, result.Line, result.Column, result.Dve); ;
				}
				else
				{
					stringBuilder.AppendFormat("            <td><span class=\"notoggle\"></span>&nbsp;<span class=\"{0}\" >&nbsp;</span>&nbsp;{1}</td>\r\n            <td>{2}</td>\r\n            <td>{3}</td>\r\n            <td>{4}</td>\r\n            <td>{5}</td>\r\n            <td>{6}</td>\r\n            <td>{7}</td>\r\n            <td>{8}</td>\r\n            <td>{9}</td>\r\n        </tr>", result.Severity.ToString().ToLower(), result.Description, GetState(result), result.Certainty, result.FixImpact, result.Category, result.Id, result.Line, result.Column, result.Dve);
				}


				if (result.SubResults?.Count > 0)
				{
					AddResults(result.SubResults, stringBuilder, depth + 1);
				}
			}
		}

		private static string GetState(ValidatorResult result)
		{
			//if(result.Suppressed == null || result.Suppressed.Value == false)
			if (result.Suppressed == false)
			{
				return "Active";
			}

			return "Suppressed";
		}
	}
}
