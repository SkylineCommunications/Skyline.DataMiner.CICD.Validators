namespace Skyline.DataMiner.CICD.Tools.Validator.OutputWriters
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Text;

    using Microsoft.Extensions.Logging;

    using Skyline.DataMiner.CICD.Tools.Validator.OutputWriters.HtmlWriter;
    using Skyline.DataMiner.CICD.Tools.Validator.OutputWriters.Results;
    using Skyline.DataMiner.CICD.Validators.Common.Model;

    internal class ResultWriterHtml(string resultsFilePath, ILogger logger, bool includeSuppressed) : IResultWriter
    {
        public void WriteResults(MajorChangeCheckerResults majorChangeCheckerResults)
        {
            logger.LogInformation("  Writing results to {ResultsFilePath}...", resultsFilePath);
            var templateStart = Resources.validatorResultsTemplateStart;
            templateStart = templateStart.Replace("$title$", $"Validator results {majorChangeCheckerResults.Protocol} v{majorChangeCheckerResults.Version}");

            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.Append(templateStart);
            stringBuilder.Append(
                $"<h1>Comparison: {majorChangeCheckerResults.PreviousProtocol} v{majorChangeCheckerResults.PreviousVersion} → {majorChangeCheckerResults.Protocol} {majorChangeCheckerResults.Version}</h1>");

            AddResultsTable(majorChangeCheckerResults, stringBuilder);

            var templateEnd = Resources.validatorResultsTemplateEnd;
            stringBuilder.Append(templateEnd);

            stringBuilder.AppendFormat("{0}<footer>Generated by <a href=\"https://github.com/SkylineCommunications/Skyline.DataMiner.CICD.Validators\" target=\"_blank\">Skyline.DataMiner.CICD.Tools.Validator</a> v{1} at {2}.</footer>{0}</body>{0}</html>", Environment.NewLine, majorChangeCheckerResults.ValidatorVersion, majorChangeCheckerResults.ValidationTimeStamp);

            File.WriteAllText(resultsFilePath, stringBuilder.ToString());
        }

        public void WriteResults(ValidatorResults validatorResults)
        {
            logger.LogInformation("  Writing results to {ResultsFilePath}...", resultsFilePath);
            var templateStart = Resources.validatorResultsTemplateStart;
            templateStart = templateStart.Replace("$title$", $"Validator results {validatorResults.Protocol} v{validatorResults.Version}");

            StringBuilder stringBuilder = new StringBuilder();
            stringBuilder.Append(templateStart);
            stringBuilder.Append($"<h1>{validatorResults.Protocol} v{validatorResults.Version}</h1>");

            AddResultsTable(validatorResults, stringBuilder);

            var templateEnd = Resources.validatorResultsTemplateEnd;
            stringBuilder.Append(templateEnd);

            stringBuilder.AppendFormat("{0}<footer>Generated by <a href=\"https://github.com/SkylineCommunications/Skyline.DataMiner.CICD.Validators\" target=\"_blank\">Skyline.DataMiner.CICD.Tools.Validator</a> v{1} at {2}.</footer>{0}</body>{0}</html>", Environment.NewLine, validatorResults.ValidatorVersion, validatorResults.ValidationTimeStamp);

            File.WriteAllText(resultsFilePath, stringBuilder.ToString());
        }

        private void AddResultsTable(ValidatorResults validatorResults, StringBuilder stringBuilder)
        {
            stringBuilder.Append("    <table id=\"resultstable\">\r\n        <tr>\r\n            <th>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Description</th>\r\n            <th>State</th>\r\n            <th>Certainty</th>\r\n            <th>Fix Impact</th>\r\n            <th>Category</th>\r\n            <th>Code</th>\r\n            <th>Line</th>\r\n            <th>Column</th>\r\n            <th>DVE</th>\r\n        </tr>");
            var criticalIssues = new List<ValidatorResult>();
            var majorIssues = new List<ValidatorResult>();
            var minorIssues = new List<ValidatorResult>();
            var warningIssues = new List<ValidatorResult>();

            foreach (var result in validatorResults.Issues)
            {
                switch (result.Severity)
                {
                    case Severity.Critical:
                        criticalIssues.Add(result);
                        break;
                    case Severity.Major:
                        majorIssues.Add(result);
                        break;
                    case Severity.Minor:
                        minorIssues.Add(result);
                        break;
                    case Severity.Warning:
                        warningIssues.Add(result);
                        break;
                }
            }

            AddProtocolLine(validatorResults, stringBuilder);
            AddCategoryLine("Critical", criticalIssues.Count, validatorResults.CriticalIssueCount, validatorResults.SuppressedCriticalIssueCount, stringBuilder);
            var convertedCriticalResults = ConvertResults(criticalIssues);
            WriteItems(convertedCriticalResults, stringBuilder);

            AddCategoryLine("Major", majorIssues.Count, validatorResults.MajorIssueCount, validatorResults.SuppressedMajorIssueCount, stringBuilder);
            var convertedMajorResults = ConvertResults(majorIssues);
            WriteItems(convertedMajorResults, stringBuilder);

            AddCategoryLine("Minor", minorIssues.Count, validatorResults.MinorIssueCount, validatorResults.SuppressedMinorIssueCount, stringBuilder);
            var convertedMinorResults = ConvertResults(minorIssues);
            WriteItems(convertedMinorResults, stringBuilder);

            AddCategoryLine("Warning", warningIssues.Count, validatorResults.WarningIssueCount, validatorResults.SuppressedWarningIssueCount, stringBuilder);
            var convertedWarningResults = ConvertResults(warningIssues);
            WriteItems(convertedWarningResults, stringBuilder);
            stringBuilder.Append("    </table>");
        }

        private void WriteItems(List<ValidatorResultTreeItem> convertedResults, StringBuilder stringBuilder)
        {
            foreach (var item in convertedResults)
            {
                item.WriteHtml(stringBuilder, includeSuppressed);
            }
        }

        private static List<ValidatorResultTreeItem> ConvertResults(IList<ValidatorResult> results)
        {
            List<ValidatorResultTreeItem> treeItems = [];

            foreach (var result in results)
            {
                if (result.SubResults?.Count > 0)
                {
                    var validatorResult = CreateTreeNode(result);
                    AddSubResults(validatorResult, result);
                    validatorResult.UpdateCounts();
                    treeItems.Add(validatorResult);
                }
                else
                {
                    var validatorResult = CreateTreeLeaf(result);
                    treeItems.Add(validatorResult);
                }
            }

            return treeItems;
        }

        private static ValidatorResultTreeLeaf CreateTreeLeaf(ValidatorResult validatorResult)
        {
            return new ValidatorResultTreeLeaf(validatorResult);
        }

        private static ValidatorResultTreeNode CreateTreeNode(ValidatorResult validatorResult)
        {
            return new ValidatorResultTreeNode(validatorResult);
        }

        private static void AddSubResults(ValidatorResultTreeNode validatorResult, ValidatorResult result)
        {
            foreach (var subResult in result.SubResults ?? [])
            {
                if (subResult.SubResults?.Count > 0)
                {
                    var node = CreateTreeNode(subResult);
                    validatorResult.SubResults.Add(node);
                    AddSubResults(node, subResult);
                    node.UpdateCounts();
                }
                else
                {
                    var leaf = CreateTreeLeaf(subResult);
                    validatorResult.SubResults.Add(leaf);
                }
            }
        }

        private void AddProtocolLine(ValidatorResults validatorResults, StringBuilder stringBuilder)
        {
            int totalActive = validatorResults.CriticalIssueCount + validatorResults.MajorIssueCount + validatorResults.MinorIssueCount + validatorResults.WarningIssueCount;
            int totalSuppressed = validatorResults.SuppressedCriticalIssueCount + validatorResults.SuppressedMajorIssueCount + validatorResults.SuppressedMinorIssueCount + validatorResults.SuppressedWarningIssueCount;

            stringBuilder.Append($"        <tr data-depth=\"0\" class=\"collapse level0\">{Environment.NewLine}            <td>");
            stringBuilder.Append(
                $"<span class=\"toggle collapse\"></span>&nbsp;<span>&nbsp;</span>&nbsp;{validatorResults.Protocol} v{validatorResults.Version} ");

            if(includeSuppressed)
            {
                stringBuilder.Append($"({totalActive} active, {totalSuppressed} suppressed)");
            }
            else
            {
                stringBuilder.Append($"({totalActive} active)");
            }

            stringBuilder.AppendFormat("</td>{0}            <td></td>{0}            <td></td>{0}            <td></td>{0}            <td></td>{0}            <td></td>{0}            <td></td>{0}            <td></td>{0}            <td></td>{0}        </tr>", Environment.NewLine);
        }

        private void AddCategoryLine(string category, int childIssueCount, int activeCount, int suppressedCount, StringBuilder stringBuilder)
        {
            stringBuilder.Append($"        <tr data-depth=\"1\" class=\"collapse level1\">{Environment.NewLine}            <td>");

            if (childIssueCount > 0)
            {
                stringBuilder.Append("<span class=\"toggle collapse\"></span>");
            }
            else
            {
                stringBuilder.Append("<span class=\"notoggle\"></span>");
            }

            stringBuilder.Append($"&nbsp;<span class=\"{category.ToLower()}\" >&nbsp;</span>&nbsp;{category} ");

            if (includeSuppressed)
            {
                stringBuilder.Append($"({activeCount} active, {suppressedCount} suppressed)");
            }
            else
            {
                stringBuilder.Append($"({activeCount} active)");
            }

            stringBuilder.AppendFormat("</td>{0}            <td></td>{0}            <td></td>{0}            <td></td>{0}            <td></td>{0}            <td></td>{0}            <td></td>{0}            <td></td>{0}            <td></td>{0}        </tr>", Environment.NewLine);
        }
    }
}
