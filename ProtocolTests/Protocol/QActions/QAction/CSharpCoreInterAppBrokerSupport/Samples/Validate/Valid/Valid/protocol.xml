<?xml version="1.0" encoding="utf-8" ?>
<!--

****************************************************************************
*  Copyright (c) 2024,  Skyline Communications NV  All Rights Reserved.    *
****************************************************************************

By using this driver, you expressly agree with the usage terms and
conditions set out below.
This driver and all related materials are protected by copyrights and
other intellectual property rights that exclusively belong
to Skyline Communications.

A user license granted for this driver is strictly for personal use only.
This driver may not be used in any way by anyone without the prior
written consent of Skyline Communications. Any sublicensing of this
driver is forbidden.

Any modifications to this driver by the user are only allowed for
personal use and within the intended purpose of the driver,
and will remain the sole responsibility of the user.
Skyline Communications will not be responsible for any damages or
malfunctions whatsoever of the driver resulting from a modification
or adaptation by the user.

The content of this driver is confidential information.
The user hereby agrees to keep this confidential information strictly
secret and confidential and not to disclose or reveal it, in whole
or in part, directly or indirectly to any person, entity, organization
or administration without the prior written consent of
Skyline Communications.

Any inquiries can be addressed to:

	Skyline Communications NV
	Ambachtenstraat 33
	B-8870 Izegem
	Belgium
	Tel.	: +32 51 31 35 69
	Fax.	: +32 51 31 01 29
	E-mail	: info@skyline.be
	Web		: www.skyline.be
	Contact	: Ben Vandenberghe

-->

<Protocol xmlns="http://www.skyline.be/protocol">
	<Name>InvalidInterAppReplyLogic</Name>
	<Description>InvalidInterAppReplyLogic DataMiner connector</Description>
	<Version>1.0.0.1</Version>
	<IntegrationID>DMS-DRV-000</IntegrationID>
	<Provider>Skyline Communications</Provider>
	<Vendor>Skyline</Vendor>
	<VendorOID>1.3.6.1.4.1.8813.2.00</VendorOID>
	<DeviceOID>0</DeviceOID>
	<ElementType>test</ElementType>
	<Type relativeTimers="true">virtual</Type>
	<Display defaultPage="General" pageOrder="General"/>
	<SNMP includepages="true">auto</SNMP>

	<Compliancies>
		<CassandraReady>true</CassandraReady>
		<MinimumRequiredVersion>10.2.0.0 - 12603</MinimumRequiredVersion>
	</Compliancies>

	<Params>
		<Param id="2">
			<Name>AfterStartup</Name>
			<Description>After Startup</Description>
			<Type>dummy</Type>
		</Param>
	</Params>

	<QActions>
		<QAction id="1" name="InvalidSendMessage_ToReturnAddress" encoding="csharp">
		</QAction>
		
		<QAction id="2" name="InvalidSetParameter_WithMostUsedPid" encoding="csharp">
			<![CDATA[using System;

using Skyline.Common.Api.Calls.SlcSdfInterApp;
using Skyline.DataMiner.Core.InterAppCalls.Common.CallBulk;
using Skyline.DataMiner.Core.InterAppCalls.Common.CallSingle;
using Skyline.DataMiner.Scripting;
using Skyline.Protocol.Common.Logging;

/// <summary>
/// DataMiner QAction Class: ProcessInterAppReceived.
/// </summary>
public class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocolExt protocol)
	{
		try
		{
			string raw = Convert.ToString(protocol.GetParameter(protocol.GetTriggerParameter()));
			IInterAppCall receivedCall = InterAppCallFactory.CreateFromRaw(raw, Shared.KnownTypes);
			if (receivedCall == null)
			{
				protocol.Log("QA" + protocol.QActionID + "|Run|ERR: Value in Parameter was empty.", LogType.Error, LogLevel.NoLogging);
				return;
			}

			foreach (var message in receivedCall.Messages)
			{
				Message returnMessage;
				message.TryExecute(protocol, protocol, Shared.Mapping, out returnMessage);
				if (returnMessage != null)
				{
					returnMessage.Send(
						protocol.SLNet.RawConnection,
						message.ReturnAddress.AgentId,
						message.ReturnAddress.ElementId,
						message.ReturnAddress.ParameterId, Shared.KnownTypes);
				}
			}
		}
		catch (Exception ex)
		{
			protocol.Log("QA" + protocol.QActionID + "|" + protocol.GetTriggerParameter() + "|Run|Exception thrown:" + Environment.NewLine + ex, LogType.Error, LogLevel.NoLogging);
		}
	}
}]]>
		</QAction>
		
		<QAction id="3" name="InvalidSetParameter_WithReturnAddress" encoding="csharp">
		</QAction>
		
		<QAction id="4" name="InvalidSendMessage_ToReturnAddressAsIntegers" encoding="csharp">
			<![CDATA[using System;

using Skyline.Common.Api.Calls.SlcSdfInterApp;
using Skyline.DataMiner.Core.InterAppCalls.Common.CallBulk;
using Skyline.DataMiner.Core.InterAppCalls.Common.CallSingle;
using Skyline.DataMiner.Scripting;
using Skyline.Protocol.Common.Logging;

/// <summary>
/// DataMiner QAction Class: ProcessInterAppReceived.
/// </summary>
public class QAction
{
	/// <summary>
	/// The QAction entry point.
	/// </summary>
	/// <param name="protocol">Link with SLProtocol process.</param>
	public static void Run(SLProtocolExt protocol)
	{
		try
		{
			string raw = Convert.ToString(protocol.GetParameter(protocol.GetTriggerParameter()));
			IInterAppCall receivedCall = InterAppCallFactory.CreateFromRaw(raw, Shared.KnownTypes);
			if (receivedCall == null)
			{
				protocol.Log("QA" + protocol.QActionID + "|Run|ERR: Value in Parameter was empty.", LogType.Error, LogLevel.NoLogging);
				return;
			}

			foreach (var message in receivedCall.Messages)
			{
				int returnAgentId = message.ReturnAddress.AgentId;
				int returnElementId = message.ReturnAddress.ElementId;
				int returnPid = message.ReturnAddress.ParameterId;

				Message returnMessage;
				message.TryExecute(protocol, protocol, Shared.Mapping, out returnMessage);
				if (returnMessage != null)
				{
					returnMessage.Send(
						protocol.SLNet.RawConnection,
						returnAgentId,
						returnElementId,
						returnPid, Shared.KnownTypes);
				}
			}
		}
		catch (Exception ex)
		{
			protocol.Log("QA" + protocol.QActionID + "|" + protocol.GetTriggerParameter() + "|Run|Exception thrown:" + Environment.NewLine + ex, LogType.Error, LogLevel.NoLogging);
		}
	}
}]]>
		</QAction>
	</QActions>

	<Groups>
		<Group id="2">
			<Name>After Startup</Name>
			<Description>After Startup</Description>
			<Type>poll action</Type>
			<Content>
				<Action>2</Action>
			</Content>
		</Group>
	</Groups>

	<Triggers>
		<Trigger id="1">
			<Name>After Startup</Name>
			<On>protocol</On>
			<Time>after startup</Time>
			<Type>action</Type>
			<Content>
				<Id>1</Id>
			</Content>
		</Trigger>
	</Triggers>

	<Actions>
		<Action id="1">
			<Name>After Startup Group</Name>
			<On id="2">group</On>
			<Type>execute next</Type>
		</Action>
		<Action id="2">
			<Name>After Startup QAction</Name>
			<On id="2">parameter</On>
			<Type>run actions</Type>
		</Action>
	</Actions>

	<Timers>
		<Timer id="1">
			<Name>Fast Timer (10s)</Name>
			<Time initial="true">10000</Time>
			<Interval>75</Interval>
			<Content>
			</Content>
		</Timer>
		<Timer id="2">
			<Name>Medium Timer (1m)</Name>
			<Time initial="true" dataDisplay="30000">60000</Time>
			<Interval>75</Interval>
			<Content>
			</Content>
		</Timer>
		<Timer id="3">
			<Name>Slow Timer (1h)</Name>
			<Time initial="true">3600000</Time>
			<Interval>75</Interval>
			<Content>
			</Content>
		</Timer>
	</Timers>

	<PortSettings>
	</PortSettings>

	<VersionHistory>
		<Branches>
			<Branch id="1">
				<Comment>Main Branch</Comment>
				<SystemVersions>
					<SystemVersion id="0">
						<MajorVersions>
							<MajorVersion id="0">
								<MinorVersions>
									<MinorVersion id="1">
										<Date>2024-05-13</Date>
										<Provider>
											<Author>JST</Author>
											<Company>Skyline Communications</Company>
										</Provider>
										<Changes>
											<NewFeature>Initial version</NewFeature>
										</Changes>
									</MinorVersion>
								</MinorVersions>
							</MajorVersion>
						</MajorVersions>
					</SystemVersion>
				</SystemVersions>
			</Branch>
		</Branches>
	</VersionHistory>

</Protocol>