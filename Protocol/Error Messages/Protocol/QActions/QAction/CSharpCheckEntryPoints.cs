// <auto-generated>This is auto-generated code by Validator Management Tool. Do not modify.</auto-generated>
namespace Skyline.DataMiner.CICD.Validators.Protocol.Tests.Protocol.QActions.QAction.CSharpCheckEntryPoints
{
    using System;
    using System.Collections.Generic;

    using Skyline.DataMiner.CICD.Models.Protocol.Read;
    using Skyline.DataMiner.CICD.Validators.Common.Interfaces;
    using Skyline.DataMiner.CICD.Validators.Common.Model;
    using Skyline.DataMiner.CICD.Validators.Protocol.Common;
    using Skyline.DataMiner.CICD.Validators.Protocol.Interfaces;

    internal static class Error
    {
        public static IValidationResult MissingEntryPoint(IValidate test, IReadable referenceNode, IReadable positionNode, string entryPointClass, string entryPointMethod, string qactionId)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CSharpCheckEntryPoints,
                ErrorId = ErrorIds.MissingEntryPoint,
                FullId = "3.12.1",
                Category = Category.QAction,
                Severity = Severity.Major,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Entry point '{0}.{1}' not found in QAction. QAction ID {2}.", entryPointClass, entryPointMethod, qactionId),
                HowToFix = "",
                HasCodeFix = false,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult UnexpectedAccessModifierForEntryPointMethod(IValidate test, IReadable referenceNode, IReadable positionNode, string entryPointClass, string entryPointMethod, string currentAccessModifier, string qactionId)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CSharpCheckEntryPoints,
                ErrorId = ErrorIds.UnexpectedAccessModifierForEntryPointMethod,
                FullId = "3.12.2",
                Category = Category.QAction,
                Severity = Severity.Major,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Entry point method '{0}.{1}' has unexpected access modifier '{2}'. QAction ID {3}.", entryPointClass, entryPointMethod, currentAccessModifier, qactionId),
                HowToFix = "",
                HasCodeFix = false,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult UnexpectedAccessModifierForEntryPointClass(IValidate test, IReadable referenceNode, IReadable positionNode, string entryPointClass, string currentAccessModifier, string qactionId)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CSharpCheckEntryPoints,
                ErrorId = ErrorIds.UnexpectedAccessModifierForEntryPointClass,
                FullId = "3.12.3",
                Category = Category.QAction,
                Severity = Severity.Major,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Entry point class '{0}' has unexpected access modifier '{1}'. QAction ID {2}.", entryPointClass, currentAccessModifier, qactionId),
                HowToFix = "",
                HasCodeFix = false,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult UnexpectedArg0TypeForEntryPointMethod(IValidate test, IReadable referenceNode, IReadable positionNode, string entryPointClass, string entryPointMethod, string arg0Type, string qactionId)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CSharpCheckEntryPoints,
                ErrorId = ErrorIds.UnexpectedArg0TypeForEntryPointMethod,
                FullId = "3.12.4",
                Category = Category.QAction,
                Severity = Severity.Major,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Entry point method '{0}.{1}' has a first argument with unexpected type '{2}'. QAction ID {3}.", entryPointClass, entryPointMethod, arg0Type, qactionId),
                HowToFix = "",
                HasCodeFix = false,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }
    }

    internal static class ErrorIds
    {
        public const uint MissingEntryPoint = 1;
        public const uint UnexpectedAccessModifierForEntryPointMethod = 2;
        public const uint UnexpectedAccessModifierForEntryPointClass = 3;
        public const uint UnexpectedArg0TypeForEntryPointMethod = 4;
    }

    /// <summary>
    /// Contains the identifiers of the checks.
    /// </summary>
    public static class CheckId
    {
        /// <summary>
        /// The check identifier.
        /// </summary>
        public const uint CSharpCheckEntryPoints = 12;
    }
}