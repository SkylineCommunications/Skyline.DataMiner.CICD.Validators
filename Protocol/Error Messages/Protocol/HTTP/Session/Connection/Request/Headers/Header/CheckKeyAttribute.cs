// <auto-generated>This is auto-generated code by Validator Management Tool. Do not modify.</auto-generated>
namespace Skyline.DataMiner.CICD.Validators.Protocol.Tests.Protocol.HTTP.Session.Connection.Request.Headers.Header.CheckKeyAttribute
{
    using System;
    using System.Collections.Generic;

    using Skyline.DataMiner.CICD.Models.Protocol.Read;
    using Skyline.DataMiner.CICD.Validators.Common.Interfaces;
    using Skyline.DataMiner.CICD.Validators.Common.Model;
    using Skyline.DataMiner.CICD.Validators.Protocol.Common;
    using Skyline.DataMiner.CICD.Validators.Protocol.Interfaces;

    internal static class Error
    {
        public static IValidationResult UnknownHeaderKey(IValidate test, IReadable referenceNode, IReadable positionNode, string headerKey, string sessionId, string connectionId)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckKeyAttribute,
                ErrorId = ErrorIds.UnknownHeaderKey,
                FullId = "8.3.1",
                Category = Category.HTTP,
                Severity = Severity.Major,
                Certainty = Certainty.Uncertain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Unknown Header key '{0}' for HTTP request. Session ID '{1}'. Connection ID '{2}'.", headerKey, sessionId, connectionId),
                HowToFix = "",
                HasCodeFix = false,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult UntrimmedHeaderKey(IValidate test, IReadable referenceNode, IReadable positionNode, string headerKey, string sessionId, string connectionId)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckKeyAttribute,
                ErrorId = ErrorIds.UntrimmedHeaderKey,
                FullId = "8.3.2",
                Category = Category.HTTP,
                Severity = Severity.Warning,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Untrimmed Header key '{0}' for HTTP request. Session ID '{1}'. Connection ID '{2}'.", headerKey, sessionId, connectionId),
                HowToFix = "Trim the key attribute value.",
                HasCodeFix = true,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult MissingKeyAttribute(IValidate test, IReadable referenceNode, IReadable positionNode, string sessionId, string connectionId)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckKeyAttribute,
                ErrorId = ErrorIds.MissingKeyAttribute,
                FullId = "8.3.3",
                Category = Category.HTTP,
                Severity = Severity.Minor,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Missing key attribute. Session ID '{0}'. Connection ID '{1}'.", sessionId, connectionId),
                HowToFix = "",
                HasCodeFix = false,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult EmptyKeyAttribute(IValidate test, IReadable referenceNode, IReadable positionNode, string sessionId, string connectionId)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckKeyAttribute,
                ErrorId = ErrorIds.EmptyKeyAttribute,
                FullId = "8.3.4",
                Category = Category.HTTP,
                Severity = Severity.Minor,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Empty key attribute. Session ID '{0}'. Connection ID '{1}'.", sessionId, connectionId),
                HowToFix = "",
                HasCodeFix = false,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult InvalidHeaderKeyForVerb(IValidate test, IReadable referenceNode, IReadable positionNode, string headerKey, string verb, string sessionId, string connectionId)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckKeyAttribute,
                ErrorId = ErrorIds.InvalidHeaderKeyForVerb,
                FullId = "8.3.5",
                Category = Category.HTTP,
                Severity = Severity.Major,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Invalid Header key '{0}' for HTTP '{1}' request. Session ID '{2}'. Connection ID '{3}'.", headerKey, verb, sessionId, connectionId),
                HowToFix = "",
                HasCodeFix = false,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult RedundantHeaderKey(IValidate test, IReadable referenceNode, IReadable positionNode, string headerKey, string sessionId, string connectionId)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckKeyAttribute,
                ErrorId = ErrorIds.RedundantHeaderKey,
                FullId = "8.3.6",
                Category = Category.HTTP,
                Severity = Severity.Warning,
                Certainty = Certainty.Uncertain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Header key '{0}' is typically managed automatically by DataMiner. Session ID '{1}'. Connection ID '{2}'.", headerKey, sessionId, connectionId),
                HowToFix = "",
                HasCodeFix = false,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult UnsupportedHeaderKey(IValidate test, IReadable referenceNode, IReadable positionNode, Certainty certainty, string headerKey, string sessionId, string connectionId)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckKeyAttribute,
                ErrorId = ErrorIds.UnsupportedHeaderKey,
                FullId = "8.3.7",
                Category = Category.HTTP,
                Severity = Severity.Major,
                Certainty = certainty,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Unsupported Header key '{0}'. Session ID '{1}'. Connection ID '{2}'.", headerKey, sessionId, connectionId),
                HowToFix = "",
                HasCodeFix = false,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }
    }

    internal static class ErrorIds
    {
        public const uint UnknownHeaderKey = 1;
        public const uint UntrimmedHeaderKey = 2;
        public const uint MissingKeyAttribute = 3;
        public const uint EmptyKeyAttribute = 4;
        public const uint InvalidHeaderKeyForVerb = 5;
        public const uint RedundantHeaderKey = 6;
        public const uint UnsupportedHeaderKey = 7;
    }

    /// <summary>
    /// Contains the identifiers of the checks.
    /// </summary>
    public static class CheckId
    {
        /// <summary>
        /// The check identifier.
        /// </summary>
        public const uint CheckKeyAttribute = 3;
    }
}