// <auto-generated>This is auto-generated code by Validator Management Tool. Do not modify.</auto-generated>
namespace Skyline.DataMiner.CICD.Validators.Protocol.Tests.Protocol.Params.Param.ArrayOptions.CheckVolatileTables
{
    using System;
    using System.Collections.Generic;

    using Skyline.DataMiner.CICD.Models.Protocol.Read;
    using Skyline.DataMiner.CICD.Validators.Common.Interfaces;
    using Skyline.DataMiner.CICD.Validators.Common.Model;
    using Skyline.DataMiner.CICD.Validators.Protocol.Common;
    using Skyline.DataMiner.CICD.Validators.Protocol.Interfaces;

    internal static class Error
    {
        public static IValidationResult IncompatibleVolatileOption(IValidate test, IReadable referenceNode, IReadable positionNode, string item2Title, string item2Value, string itemKind, string idOrPid, string itemId)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckVolatileTables,
                ErrorId = ErrorIds.IncompatibleVolatileOption,
                FullId = "2.78.1",
                Category = Category.Param,
                Severity = Severity.Major,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.Breaking,
                GroupDescription = "",
                Description = String.Format("Incompatible '{0}' option '{1}' with '{2}' option '{3}'. {4} {5} '{6}'.", "ArrayOptions/options", "volatile", item2Title, item2Value, itemKind, idOrPid, itemId),
                HowToFix = "Remove the 'volatile' option from the <ArrayOptions> tag or remove the incompatible features from the table (such as alarmed columns, foreign keys, or DVE usage).",
                HasCodeFix = false,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult SuggestedVolatileOption(IValidate test, IReadable referenceNode, IReadable positionNode, string itemId)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckVolatileTables,
                ErrorId = ErrorIds.SuggestedVolatileOption,
                FullId = "2.78.2",
                Category = Category.Param,
                Severity = Severity.Minor,
                Certainty = Certainty.Uncertain,
                Source = Source.Validator,
                FixImpact = FixImpact.Breaking,
                GroupDescription = "",
                Description = String.Format("Suggested '{0}' option '{1}' in {2} {3} '{4}'.", "ArrayOptions/options", "volatile", "Table", "PID", itemId),
                HowToFix = "Add the 'volatile' option to the table's <ArrayOptions>.",
                HasCodeFix = false,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult IncompatibleVolatileTable(IValidate test, IReadable referenceNode, IReadable positionNode, string item2Value)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckVolatileTables,
                ErrorId = ErrorIds.IncompatibleVolatileTable,
                FullId = "2.78.3",
                Category = Category.Param,
                Severity = Severity.Major,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.Breaking,
                GroupDescription = "",
                Description = String.Format("Incompatible '{0}' value '{1}' with '{2}' value '{3}'.", "ArrayOptions/options", "volatile", "Table PID", item2Value),
                HowToFix = "Remove the 'volatile' option from the <ArrayOptions> tag or remove the incompatible features from the table (such as alarmed columns, foreign keys, or DVE usage).",
                HasCodeFix = false,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }
    }

    internal static class ErrorIds
    {
        public const uint IncompatibleVolatileOption = 1;
        public const uint SuggestedVolatileOption = 2;
        public const uint IncompatibleVolatileTable = 3;
    }

    /// <summary>
    /// Contains the identifiers of the checks.
    /// </summary>
    public static class CheckId
    {
        /// <summary>
        /// The check identifier.
        /// </summary>
        public const uint CheckVolatileTables = 78;
    }
}