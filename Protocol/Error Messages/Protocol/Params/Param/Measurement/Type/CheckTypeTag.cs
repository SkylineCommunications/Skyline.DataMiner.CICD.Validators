// <auto-generated>This is auto-generated code by Validator Management Tool. Do not modify.</auto-generated>
namespace Skyline.DataMiner.CICD.Validators.Protocol.Tests.Protocol.Params.Param.Measurement.Type.CheckTypeTag
{
    using System;
    using System.Collections.Generic;

    using Skyline.DataMiner.CICD.Models.Protocol.Read;
    using Skyline.DataMiner.CICD.Validators.Common.Interfaces;
    using Skyline.DataMiner.CICD.Validators.Common.Model;
    using Skyline.DataMiner.CICD.Validators.Protocol.Common;
    using Skyline.DataMiner.CICD.Validators.Protocol.Interfaces;

    internal static class Error
    {
        public static IValidationResult TogglebuttonRecommended(IValidate test, IReadable referenceNode, IReadable positionNode, string pid)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckTypeTag,
                ErrorId = ErrorIds.TogglebuttonRecommended,
                FullId = "2.37.1",
                Category = Category.Param,
                Severity = Severity.Minor,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Measurement/Type 'togglebutton' is recommended for Param with ID '{0}'.", pid),
                HowToFix = "Change measurement type to 'togglebutton'.",
                HasCodeFix = true,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult MatrixInvalidInterpreteRawType(IValidate test, IReadable referenceNode, IReadable positionNode, string rawType, string matrixPid, bool hasCodeFix)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckTypeTag,
                ErrorId = ErrorIds.MatrixInvalidInterpreteRawType,
                FullId = "2.37.2",
                Category = Category.Param,
                Severity = Severity.Major,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Invalid RawType '{0}' for matrix Param '{1}'. Expected RawType 'other'.", rawType, matrixPid),
                HowToFix = "",
                HasCodeFix = hasCodeFix,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult MatrixInvalidInterpreteType(IValidate test, IReadable referenceNode, IReadable positionNode, string interpreteType, string matrixPid, string expectedInterpreteType, bool hasCodeFix)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckTypeTag,
                ErrorId = ErrorIds.MatrixInvalidInterpreteType,
                FullId = "2.37.3",
                Category = Category.Param,
                Severity = Severity.Major,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Invalid Interprete/Type '{0}' for matrix Param '{1}'. Expected Type '{2}'.", interpreteType, matrixPid, expectedInterpreteType),
                HowToFix = "",
                HasCodeFix = hasCodeFix,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult MatrixInvalidInterpreteLengthType(IValidate test, IReadable referenceNode, IReadable positionNode, string lengthType, string matrixPid, bool hasCodeFix)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckTypeTag,
                ErrorId = ErrorIds.MatrixInvalidInterpreteLengthType,
                FullId = "2.37.4",
                Category = Category.Param,
                Severity = Severity.Major,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Invalid LengthType '{0}' for matrix Param '{1}'. Expected LengthType 'next param'.", lengthType, matrixPid),
                HowToFix = "",
                HasCodeFix = hasCodeFix,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult MatrixAlarmingDisabled(IValidate test, IReadable referenceNode, IReadable positionNode, string matrixPid)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckTypeTag,
                ErrorId = ErrorIds.MatrixAlarmingDisabled,
                FullId = "2.37.5",
                Category = Category.Param,
                Severity = Severity.Major,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("{0} Param '{1}' should be alarmed.", "Matrix", matrixPid),
                HowToFix = "Enable alarming.",
                HasCodeFix = true,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult MatrixTrendingEnabled(IValidate test, IReadable referenceNode, IReadable positionNode, string matrixPid)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckTypeTag,
                ErrorId = ErrorIds.MatrixTrendingEnabled,
                FullId = "2.37.6",
                Category = Category.Param,
                Severity = Severity.Major,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("{0} Param '{1}' should not be trended.", "Matrix", matrixPid),
                HowToFix = "Disable trending.",
                HasCodeFix = true,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult MatrixSetterOnWrite(IValidate test, IReadable referenceNode, IReadable positionNode, string matrixPid)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckTypeTag,
                ErrorId = ErrorIds.MatrixSetterOnWrite,
                FullId = "2.37.7",
                Category = Category.Param,
                Severity = Severity.Major,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Unsupported attribute '{0}' in {1} '{2}'. Current value '{3}'.", "setter", "Matrix", matrixPid, "true"),
                HowToFix = "Remove the setter attribute.",
                HasCodeFix = true,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult MatrixInvalidInterprete(IValidate test, IReadable referenceNode, IReadable positionNode, string matrixPid)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckTypeTag,
                ErrorId = ErrorIds.MatrixInvalidInterprete,
                FullId = "2.37.8",
                Category = Category.Param,
                Severity = Severity.Major,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Invalid Interprete for matrix Param '{0}'.", matrixPid),
                HowToFix = "",
                HasCodeFix = true,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult InvalidParamType(IValidate test, IReadable referenceNode, IReadable positionNode, string paramType, string measurementType, string paramId)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckTypeTag,
                ErrorId = ErrorIds.InvalidParamType,
                FullId = "2.37.9",
                Category = Category.Param,
                Severity = Severity.Major,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Invalid value '{0}' in '{1}' for '{2}'. {3} {4} '{5}'.", paramType, "Param/Type", measurementType, "Param", "ID", paramId),
                HowToFix = "",
                HasCodeFix = false,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult EmptyTag(IValidate test, IReadable referenceNode, IReadable positionNode, string paramId)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckTypeTag,
                ErrorId = ErrorIds.EmptyTag,
                FullId = "2.37.10",
                Category = Category.Param,
                Severity = Severity.Major,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Empty tag '{0}' in {1} '{2}'.", "Measurement/Type", "Param", paramId),
                HowToFix = "",
                HasCodeFix = false,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult InvalidValue(IValidate test, IReadable referenceNode, IReadable positionNode, string measurementType, string paramId)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckTypeTag,
                ErrorId = ErrorIds.InvalidValue,
                FullId = "2.37.11",
                Category = Category.Param,
                Severity = Severity.Major,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Invalid value '{0}' in tag '{1}'. {2} {4} '{3}'.", measurementType, "Measurement/Type", "Param", paramId, "ID"),
                HowToFix = "",
                HasCodeFix = false,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult UntrimmedTag(IValidate test, IReadable referenceNode, IReadable positionNode, string paramId, string untrimmedValue)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckTypeTag,
                ErrorId = ErrorIds.UntrimmedTag,
                FullId = "2.37.12",
                Category = Category.Param,
                Severity = Severity.Warning,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Untrimmed tag '{0}' in {1} '{2}'. Current value '{3}'.", "Measurement/Type", "Param", paramId, untrimmedValue),
                HowToFix = "",
                HasCodeFix = true,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }
    }

    internal static class ErrorIds
    {
        public const uint TogglebuttonRecommended = 1;
        public const uint MatrixInvalidInterpreteRawType = 2;
        public const uint MatrixInvalidInterpreteType = 3;
        public const uint MatrixInvalidInterpreteLengthType = 4;
        public const uint MatrixAlarmingDisabled = 5;
        public const uint MatrixTrendingEnabled = 6;
        public const uint MatrixSetterOnWrite = 7;
        public const uint MatrixInvalidInterprete = 8;
        public const uint InvalidParamType = 9;
        public const uint EmptyTag = 10;
        public const uint InvalidValue = 11;
        public const uint UntrimmedTag = 12;
    }

    /// <summary>
    /// Contains the identifiers of the checks.
    /// </summary>
    public static class CheckId
    {
        /// <summary>
        /// The check identifier.
        /// </summary>
        public const uint CheckTypeTag = 37;
    }
}