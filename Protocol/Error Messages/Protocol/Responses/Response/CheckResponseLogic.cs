// <auto-generated>This is auto-generated code by Validator Management Tool. Do not modify.</auto-generated>
namespace Skyline.DataMiner.CICD.Validators.Protocol.Tests.Protocol.Responses.Response.CheckResponseLogic
{
    using System;
    using System.Collections.Generic;

    using Skyline.DataMiner.CICD.Models.Protocol.Read;
    using Skyline.DataMiner.CICD.Validators.Common.Interfaces;
    using Skyline.DataMiner.CICD.Validators.Common.Model;
    using Skyline.DataMiner.CICD.Validators.Protocol.Common;
    using Skyline.DataMiner.CICD.Validators.Protocol.Interfaces;

    internal static class Error
    {
        public static IValidationResult MissingCrcResponseAction(IValidate test, IReadable referenceNode, IReadable positionNode, string responseId, string paramPid)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckResponseLogic,
                ErrorId = ErrorIds.MissingCrcResponseAction,
                FullId = "11.1.1",
                Category = Category.Response,
                Severity = Severity.Major,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("No '{0}' Action triggered before Response '{1}'. '{0}' Param '{2}'.", "CRC", responseId, paramPid),
                HowToFix = "Make sure a CRC action is triggered after response.",
                HasCodeFix = false,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }

        public static IValidationResult SmartSerialResponseShouldContainHeaderTrailer(IValidate test, IReadable referenceNode, IReadable positionNode, string connectionId, string responseId)
        {
            return new ValidationResult
            {
                Test = test,
                CheckId = CheckId.CheckResponseLogic,
                ErrorId = ErrorIds.SmartSerialResponseShouldContainHeaderTrailer,
                FullId = "11.1.2",
                Category = Category.Response,
                Severity = Severity.Major,
                Certainty = Certainty.Certain,
                Source = Source.Validator,
                FixImpact = FixImpact.NonBreaking,
                GroupDescription = "",
                Description = String.Format("Defined headers and trailers linked to smart-serial connection '{0}' should be used in response '{1}'.", connectionId, responseId),
                HowToFix = "Use a header and matching trailer parameter in the response.",
                HasCodeFix = false,

                PositionNode = positionNode,
                ReferenceNode = referenceNode,
            };
        }
    }

    internal static class ErrorIds
    {
        public const uint MissingCrcResponseAction = 1;
        public const uint SmartSerialResponseShouldContainHeaderTrailer = 2;
    }

    /// <summary>
    /// Contains the identifiers of the checks.
    /// </summary>
    public static class CheckId
    {
        /// <summary>
        /// The check identifier.
        /// </summary>
        public const uint CheckResponseLogic = 1;
    }
}